<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <OutputType>WinExe</OutputType>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
    <ApplicationIcon>Assets\Branding\KeyCard.ico</ApplicationIcon>

    <!-- Swagger codegen configuration -->
    <SwaggerUrl>https://localhost:5149/swagger/v1/swagger.json</SwaggerUrl>
    <SwaggerJsonPath>$(ProjectDir)Generated\swagger.v1.json</SwaggerJsonPath>

    <!-- Preserve your original default -->
    <AutoFetchSwagger>true</AutoFetchSwagger>

    <!-- You can still manually force NSwag by setting this true -->
    <RunNSwag>false</RunNSwag>
  </PropertyGroup>

  <!-- Auto-drive AutoFetchSwagger by launch profile or env var (no manual edits needed) -->
  <PropertyGroup>
    <!-- Visual Studio sets this to the selected profile name -->
    <AutoFetchSwagger Condition="'$(ActiveDebugProfile)' == 'KeyCard (Live)'">true</AutoFetchSwagger>
    <AutoFetchSwagger Condition="'$(ActiveDebugProfile)' == 'KeyCard (Mock)'">false</AutoFetchSwagger>

    <!-- CI/CLI override: AUTO_FETCH_SWAGGER=true/false -->
    <AutoFetchSwagger Condition="'$(AUTO_FETCH_SWAGGER)' != ''">$(AUTO_FETCH_SWAGGER)</AutoFetchSwagger>
  </PropertyGroup>

  <!-- Remove any accidental wrong build actions on .axaml -->
  <ItemGroup>
    <Page Remove="**\*.axaml" />
    <None Remove="**\*.axaml" />
    <AvaloniaXaml Remove="**\*.axaml" />
  </ItemGroup>

  <!-- Ensure config JSONs aren't double-tracked as <None> by default globs -->
  <ItemGroup>
    <None Remove="Configuration\**\*.json" />
  </ItemGroup>

  <!-- configuration JSON files get copied to output -->
  <ItemGroup>
    <Content Include="Configuration\**\*.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Compile ALL .axaml (recursively) -->
  <ItemGroup>
    <AvaloniaXaml Include="App.axaml" />
    <AvaloniaXaml Include="Views\**\*.axaml" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <!-- Pair code-behind to XAML (recursively) -->
  <ItemGroup>
    <Compile Update="App.axaml.cs">
      <DependentUpon>App.axaml</DependentUpon>
    </Compile>
    <Compile Update="Views\**\*.axaml.cs">
      <DependentUpon>%(Filename).axaml</DependentUpon>
    </Compile>
  </ItemGroup>

  <!-- Packages -->
  <ItemGroup>
    <PackageReference Include="Avalonia" />
    <PackageReference Include="Avalonia.Desktop" />
    <PackageReference Include="Avalonia.ReactiveUI" />
    <PackageReference Include="Avalonia.Themes.Fluent" />
    <PackageReference Include="Avalonia.Controls.DataGrid" />
    <PackageReference Include="CommunityToolkit.Mvvm" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Microsoft.Extensions.Http" />
    <PackageReference Include="Microsoft.Extensions.Configuration" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Binder" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" />
    <PackageReference Include="Polly" />
    <PackageReference Include="Polly.Extensions.Http" />
    <!-- NSwag for typed client generation -->
    <PackageReference Include="NSwag.MSBuild" PrivateAssets="All" />
  </ItemGroup>

  <!-- Optional asset -->
  <ItemGroup>
    <AvaloniaResource Include="Assets\logo.png" Condition="Exists('Assets\logo.png')" />
  </ItemGroup>

  <!-- Try to fetch swagger.json into the cache if API is reachable (Windows PS + *nix curl).
       This target NEVER fails the build; it just tries. -->
  <Target Name="FetchSwaggerIfAvailable"
          BeforeTargets="BeforeBuild"
          Condition="'$(AutoFetchSwagger)' == 'true'">

    <!-- Windows/PowerShell path (quoted values; safe, quiet folder creation) -->
    <Exec Condition="'$(OS)' == 'Windows_NT' AND '$(SwaggerUrl)' != ''"
          IgnoreExitCode="true"
          Command="powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;$u='$(SwaggerUrl)'; $d='$(SwaggerJsonPath)'; $dir=[System.IO.Path]::GetDirectoryName($d); if(-not [string]::IsNullOrWhiteSpace($dir) -and -not (Test-Path -LiteralPath $dir)){[void][System.IO.Directory]::CreateDirectory($dir)}; $tmp=$d + '.tmp'; try { Invoke-WebRequest -TimeoutSec 5 -Uri $u -OutFile $tmp } catch { exit 0 }; if (Test-Path -LiteralPath $d) { if ((Get-FileHash -LiteralPath $d).Hash -eq (Get-FileHash -LiteralPath $tmp).Hash) { Remove-Item -LiteralPath $tmp -Force; Write-Host 'Swagger unchanged' } else { Move-Item -LiteralPath $tmp -Force -Destination $d; Write-Host 'Swagger updated' } } else { Move-Item -LiteralPath $tmp -Force -Destination $d; Write-Host 'Swagger cached' }&quot;" />

    <!-- *nix/mac curl path -->
    <Exec Condition="'$(OS)' != 'Windows_NT' AND '$(SwaggerUrl)' != ''"
          IgnoreExitCode="true"
          Command="bash -c &quot;&#x0A;u=&quot;$(SwaggerUrl)&quot;;&#x0A;d=&quot;$(SwaggerJsonPath)&quot;;&#x0A;mkdir -p &quot;$(ProjectDir)Generated&quot;;&#x0A;tmp=&quot;$d.tmp&quot;;&#x0A;if curl -fsSL --connect-timeout 5 &quot;$u&quot; -o &quot;$tmp&quot;; then&#x0A;  if [ -f &quot;$d&quot; ] &amp;&amp; cmp -s &quot;$d&quot; &quot;$tmp&quot;; then&#x0A;    rm &quot;$tmp&quot;; echo Swagger unchanged;&#x0A;  else&#x0A;    mv -f &quot;$tmp&quot; &quot;$d&quot;; echo Swagger updated;&#x0A;  fi&#x0A;fi&#x0A;&quot; " />
  </Target>

  <!-- Generate typed client ONLY if cache exists OR explicitly forced -->
  <Target Name="GenerateTypedApiClient"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="FetchSwaggerIfAvailable"
          Condition="Exists('$(SwaggerJsonPath)') OR '$(RunNSwag)' == 'true'">

    <Message Text="NSwag: Generating typed API client from $(SwaggerJsonPath)" Importance="High" />

    <!-- Prefer Net80/Net70/Net60; $(NSwagExe_*) already includes the proper dotnet command -->
    <Exec Condition="Exists('$(ProjectDir)nswag.json') AND '$(NSwagExe_Net80)' != ''"
          Command="$(NSwagExe_Net80) run &quot;$(ProjectDir)nswag.json&quot;" />
    <Exec Condition="Exists('$(ProjectDir)nswag.json') AND '$(NSwagExe_Net80)' == '' AND '$(NSwagExe_Net70)' != ''"
          Command="$(NSwagExe_Net70) run &quot;$(ProjectDir)nswag.json&quot;" />
    <Exec Condition="Exists('$(ProjectDir)nswag.json') AND '$(NSwagExe_Net80)' == '' AND '$(NSwagExe_Net70)' == '' AND '$(NSwagExe_Net60)' != ''"
          Command="$(NSwagExe_Net60) run &quot;$(ProjectDir)nswag.json&quot;" />
  </Target>
  <!-- ====== /NSwag ====== -->

</Project>

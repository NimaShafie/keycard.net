<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <OutputType>WinExe</OutputType>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>

    <!-- Avalonia -->
    <AvaloniaUseCompiledBindingsByDefault>true</AvaloniaUseCompiledBindingsByDefault>
    <AvaloniaPreviewerEnabled>false</AvaloniaPreviewerEnabled>

    <ApplicationIcon>Assets\Branding\KeyCard.ico</ApplicationIcon>

    <!-- Swagger codegen configuration -->
    <SwaggerUrl>https://localhost:5149/swagger/v1/swagger.json</SwaggerUrl>
    <SwaggerJsonPath>$(ProjectDir)Generated\swagger.v1.json</SwaggerJsonPath>

    <!-- ==== FAST BUILD DEFAULTS ==== -->
    <!-- Keep heavy steps OFF by default; turn them on explicitly when needed -->
    <AutoFetchSwagger>false</AutoFetchSwagger>
    <RunNSwag>false</RunNSwag>
    <EnableDesignerWorkarounds>false</EnableDesignerWorkarounds>

    <!-- Re-enable compiler/build perf features -->
    <MSBuildDisableNodeReuse>false</MSBuildDisableNodeReuse>
    <BuildInParallel>true</BuildInParallel>
    <UseSharedCompilation>true</UseSharedCompilation>
    <DebugType>portable</DebugType>
  </PropertyGroup>

  <!-- Remove any accidental wrong build actions on .axaml -->
  <ItemGroup>
    <Page Remove="**\*.axaml" />
    <None Remove="**\*.axaml" />
    <AvaloniaXaml Remove="**\*.axaml" />
  </ItemGroup>

  <!-- Ensure config JSONs aren't double-tracked as <None> by default globs -->
  <ItemGroup>
    <None Remove="Configuration\**\*.json" />
  </ItemGroup>

  <!-- configuration JSON files get copied to output -->
  <ItemGroup>
    <Content Include="Configuration\**\*.json">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </Content>
  </ItemGroup>

  <!-- Compile ALL .axaml (recursively) -->
  <ItemGroup>
    <AvaloniaXaml Include="App.axaml" />
    <AvaloniaXaml Include="Views\**\*.axaml" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Assets\**" />
  </ItemGroup>

  <!-- Pair code-behind to XAML (recursively) -->
  <ItemGroup>
    <Compile Update="App.axaml.cs">
      <DependentUpon>App.axaml</DependentUpon>
    </Compile>
    <Compile Update="Views\**\*.axaml.cs">
      <DependentUpon>%(Filename).axaml</DependentUpon>
    </Compile>
  </ItemGroup>

  <!-- Packages (versions come from Directory.Packages.props) -->
  <ItemGroup>
    <PackageReference Include="Avalonia" />
    <PackageReference Include="Avalonia.Desktop" />
    <PackageReference Include="Avalonia.ReactiveUI" />
    <PackageReference Include="Avalonia.Themes.Fluent" />
    <PackageReference Include="Avalonia.Controls.DataGrid" />
    <PackageReference Include="CommunityToolkit.Mvvm" />
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" />
    <PackageReference Include="Microsoft.Extensions.DependencyInjection" />
    <PackageReference Include="Microsoft.Extensions.Hosting" />
    <PackageReference Include="Microsoft.Extensions.Http" />
    <PackageReference Include="Microsoft.Extensions.Configuration" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Binder" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" />
    <PackageReference Include="Polly" />
    <PackageReference Include="Polly.Extensions.Http" />
    <!-- NSwag for typed client generation (version centralized) -->
    <PackageReference Include="NSwag.MSBuild" PrivateAssets="All" />
  </ItemGroup>

  <!-- Optional asset -->
  <ItemGroup>
    <AvaloniaResource Include="Assets\logo.png" Condition="Exists('Assets\logo.png')" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaXaml Update="Views\HousekeepingKanbanView.axaml">
      <SubType>Designer</SubType>
    </AvaloniaXaml>
  </ItemGroup>

  <!-- ====== (OPT-IN) DESIGNER WORKAROUNDS: run ONLY if explicitly enabled ====== -->
  <Target Name="KillAvaloniaPreviewer"
          BeforeTargets="CompileAvaloniaXaml"
          Condition="'$(EnableDesignerWorkarounds)' == 'true'">
    <Exec Condition="'$(OS)' == 'Windows_NT'"
          Command="cmd /c for /f &quot;tokens=1&quot; %25%25p in ('tasklist ^| find /i &quot;Avalonia.Designer.HostApp.exe&quot;') do taskkill /im Avalonia.Designer.HostApp.exe /f &gt;nul 2&gt;nul"
          IgnoreExitCode="true" />
    <Exec Condition="'$(OS)' == 'Windows_NT'"
          Command="cmd /c tasklist /v ^| find /i &quot;Avalonia Previewer&quot; &gt;nul 2&gt;nul &amp;&amp; taskkill /fi &quot;WINDOWTITLE eq Avalonia Previewer*&quot; /f &gt;nul 2&gt;nul"
          IgnoreExitCode="true" />
  </Target>

  <Target Name="CleanAvaloniaIntermediates"
          BeforeTargets="CompileAvaloniaXaml"
          Condition="'$(EnableDesignerWorkarounds)' == 'true'">
    <PropertyGroup>
      <_AvaloniaDir>$(IntermediateOutputPath)Avalonia</_AvaloniaDir>
    </PropertyGroup>
    <RemoveDir Directories="$(_AvaloniaDir)" ContinueOnError="true" />
    <Delete Files="$(IntermediateOutputPath)Avalonia\original.pdb" ContinueOnError="true" />
  </Target>
  <!-- ====== /designer workarounds ====== -->

  <!-- ===== NSwag: fetch + generate typed client (OPT-IN) ===== -->
  <Target Name="FetchSwaggerIfAvailable"
          BeforeTargets="BeforeBuild"
          Condition="'$(AutoFetchSwagger)' == 'true'">
    <!-- Windows/PowerShell -->
    <Exec Condition="'$(OS)' == 'Windows_NT' AND '$(SwaggerUrl)' != ''"
          IgnoreExitCode="true"
          Command="powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;$u='$(SwaggerUrl)'; $d='$(SwaggerJsonPath)'; $dir=[System.IO.Path]::GetDirectoryName($d); if(-not [string]::IsNullOrWhiteSpace($dir) -and -not (Test-Path -LiteralPath $dir)){[void][System.IO.Directory]::CreateDirectory($dir)}; $tmp=$d + '.tmp'; try { Invoke-WebRequest -TimeoutSec 5 -Uri $u -OutFile $tmp } catch { exit 0 }; if (Test-Path -LiteralPath $d) { if ((Get-FileHash -LiteralPath $d).Hash -eq (Get-FileHash -LiteralPath $tmp).Hash) { Remove-Item -LiteralPath $tmp -Force; Write-Host 'Swagger unchanged' } else { Move-Item -LiteralPath $tmp -Force -Destination $d; Write-Host 'Swagger updated' } } else { Move-Item -LiteralPath $tmp -Force -Destination $d; Write-Host 'Swagger cached' }&quot;" />
    <!-- *nix/mac curl -->
    <Exec Condition="'$(OS)' != 'Windows_NT' AND '$(SwaggerUrl)' != ''"
          IgnoreExitCode="true"
          Command="bash -c &quot;&#xA;u=&quot;$(SwaggerUrl)&quot;;&#xA;d=&quot;$(SwaggerJsonPath)&quot;;&#xA;mkdir -p &quot;$(ProjectDir)Generated&quot;;&#xA;tmp=&quot;$d.tmp&quot;;&#xA;if curl -fsSL --connect-timeout 5 &quot;$u&quot; -o &quot;$tmp&quot;; then&#xA;  if [ -f &quot;$d&quot; ] &amp;&amp; cmp -s &quot;$d&quot; &quot;$tmp&quot;; then&#xA;    rm &quot;$tmp&quot;; echo Swagger unchanged;&#xA;  else&#xA;    mv -f &quot;$tmp&quot; &quot;$d&quot;; echo Swagger updated;&#xA;  fi&#xA;fi&#xA;&quot; " />
  </Target>

  <Target Name="GenerateTypedApiClient"
          BeforeTargets="BeforeBuild"
          DependsOnTargets="FetchSwaggerIfAvailable"
          Condition="'$(RunNSwag)' == 'true' AND Exists('$(ProjectDir)nswag.json')">
    <Message Text="NSwag: Generating typed API client from $(SwaggerJsonPath)" Importance="High" />
    <Exec Condition="'$(NSwagExe_Net80)' != ''" Command="$(NSwagExe_Net80) run &quot;$(ProjectDir)nswag.json&quot;" />
    <Exec Condition="'$(NSwagExe_Net80)' == '' AND '$(NSwagExe_Net70)' != ''" Command="$(NSwagExe_Net70) run &quot;$(ProjectDir)nswag.json&quot;" />
    <Exec Condition="'$(NSwagExe_Net80)' == '' AND '$(NSwagExe_Net70)' == '' AND '$(NSwagExe_Net60)' != ''" Command="$(NSwagExe_Net60) run &quot;$(ProjectDir)nswag.json&quot;" />
  </Target>
  <!-- ===== /NSwag ===== -->

</Project>
